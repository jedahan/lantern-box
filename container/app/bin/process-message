#!/usr/bin/env node

if (process.argv.length != 3) {
    console.log("This program requires one and only one argument to run");
    process.exit();
}

//----------------------------------------------------------------------------
var db;
var input_str = process.argv[2];


function processCreate(doc) {
    console.log("CREATE DOC ", doc);
    return db.post(doc).then(function(results) {
        console.log(results);
    })
    .catch(function(err) {
        console.log(err);
    });
}

function processUpdate(doc) {
    db.get(doc._id).then(function(existing_doc) {
        console.log("found document. merging...");
        for (var idx in doc) {
            existing_doc[idx] = doc[idx];
        }

        console.log("merged doc", existing_doc);

        return db.post(existing_doc)
            .then(function(results) {
                console.log(results);
            });

    })
    .catch(function(err) {
        if (err.status == 404) {
            processCreate(doc);
        }
        else {
            console.log(err);
        }
    });
}

function processDelete(doc) {
    console.log("DELETE DOC ", doc);

    db.get(doc._id).then(function(existing_doc) {
        console.log("found document. removing...");
        doc._rev = existing_doc._rev;
        return db.remove(doc).then(function(results) {
            console.log(results);
        });
    })
    .catch(function(err) {
        if (err.status == 404) {
            console.log("can't update non-existing document");
        }
        else {
            console.log(err);
        }
    });
}



//----------------------------------------------------------------------------

var input = input_str.replace(/\^+/, '\x01').split('\x01');
if (input.length == 2) {
    // update
    var PouchDB = require("lantern-serve").PouchDB;
    db = new PouchDB("http://localhost/db/lantern/");
    
    var id = input[0];
    var msg = input[1];
    var parts = msg.split("?");

    console.log("message id = " + id);

    // begin constructing doc based on message
    var doc = {
        _id: parts[0],
        $rx: true // document received by long-range radio, don't push back out
    };

    var keys = parts[1];
    if (keys) {
        keys.split("&").forEach(function(part) {
            var item = keys.split("=");
            // double-check to make sure we don't process $key or _key
            if (item[0][0] == "$" || item[0][0] == "_") {
                return;
            }
            doc[item[0]] = decodeURIComponent(item[1]);
        });
            
        doc.$ra = new Date();
        processUpdate(doc);
    }
    else {
        // no data means we want to delete the doc
        processDelete(doc);
    }
}
else {
    console.log("ignoring message: " + input);
}