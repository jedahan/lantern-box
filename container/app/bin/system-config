#!/bin/bash

# this script must be run through a Docker context and chroot
# envionment variables will not load directly from a Raspberry Pi
# This script must be run through a Docker context and chroot.
# Environment variables will not load directly from a Raspberry Pi.

ADMIN_PASS=${ADMIN_PASS:-wins}
DB_PASS=${DB_PASS:-my-db-pass}
WIFI_DESC=${WIFI_DESC:-Lantern}
WIFI_SSID=${WIFI_SSID:-my-router}
WIFI_PASS=${WIFI_PASS:-my-pass}


echo "encrypting wifi pass..."
WIFI_PASS=`wpa_passphrase ${WIFI_SSID} <<< ${WIFI_PASS} | grep -oE '(psk=)[a-zA-Z0-9]*$' | tr -d 'psk='`


# @todo make unique even when using same pi image for multiple lanterns
echo "generating unique identifier for lantern..."
LANTERN_ID="$(openssl rand -hex 1)"

echo "saving config to disk..."
touch /opt/lantern/config.yml
chmod go-rw /opt/lantern/config.yml
cat <<EOF >"/opt/lantern/config.yml"
LANTERN_ID: ${LANTERN_ID}
WIFI_SSID: ${WIFI_SSID}
WIFI_PASS: ${WIFI_PASS}
DB_PASS: ${DB_PASS}
EOF


echo "updating pouchdb server config..."
sed -i -e "s/{{db_pass}}/${DB_PASS}/g" /opt/lantern/config.json
chmod go-rw /opt/lantern/config.json


echo "updating netctl wlan0 config..."
/opt/lantern/bin/wifi-update


echo "updating admin password..."
echo -e "${ADMIN_PASS}\n${ADMIN_PASS}" | passwd admin


if [[ -d /opt/lantern/node_modules/ ]]; then
    echo "using cached node_modules..."
fi

cd /opt/lantern/
sudo chmod -R o-rwx /opt/lantern
npm config set unsafe-perm true
npm install
npm config set unsafe-perm false

