#!/usr/bin/env node
var utils = require("../lib/utils");
var path = require("path");
var spawn = require('child_process').spawn;

// custom build of PouchDB to meet our SQLite requirements
var PouchDB = require('pouchdb-core')
        .plugin(require('pouchdb-adapter-node-websql'))
        .plugin(require('pouchdb-adapter-http'));

var db = new PouchDB(utils.getLocalDatabaseURI());



var ping = 40 * 1000; // every 40s tell other lanterns we exist

//------------------------------------------------------------------------
/**
* push change over distributed long-range network
**/
function addMessageToQueue(id, msg) {
    if (!msg) return;

    if (utils.isLantern()) {
        var program = spawn(path.resolve(__dirname + "/../bin/queue-message"), [msg]);

        program.stdout.on('data', function (data) {
            console.log("[broadcast] " + data.toString());
        });

        program.stderr.on('data', function (data) {
          console.log('[broadcast] q err: ' + data.toString());
        });
    }
    else {
        console.log("[broadcast] simulate: " + msg);
    }
}

/**
* let other lanterns know about a key/value change
**/
function notifyDocumentUpdate(doc) {
    var msg = buildParameters(doc);
    if (msg.length) {
        addMessageToQueue(doc._id, "^"+doc._id + "::" + msg);
    }
}


/**
* let other lanterns know about a new document
**/
function notifyDocumentCreate(doc) {
    var msg = buildParameters(doc);
    addMessageToQueue(doc._id, "+"+doc._id + "::" + msg);
}


/**
* let other lanterns know about a removed document
**/
function notifyDocumentRemove(id) {
    addMessageToQueue(id, "-"+id);
}

/**
* let other lanterns know this device is online
**/
function notifyLanternOnline() {
    setTimeout(function() {
        var id = utils.getLanternID();
        if (!id) {
            console.log("[broadcast] missing lantern id");
        }
        else {
            addMessageToQueue(id, "^d:"+ id + "?st=1");
        }
    }, 10000*Math.random());
}

/**
* construct a query-string style list of key/value pairs
*/
function buildParameters(doc) {
    var params = [];
    for (var k in doc) {
        // ignore private keys and reserved _ namespace items when sending
        if (k[0] != "_" && k[0] != "$") {
            var val = doc[k];
            if (val instanceof Array) {
                val = val.join(",");
            }
            else if (typeof(val) == "object") {
                val = JSON.stringify(val);
            }
            params.push(k+"="+val);
        }
    }
    return params.join("&");
}


/**
* handler to process any document change in local lantern database
**/
function onChange(change) {
    var msg = "";
    for (var idx in change.changes) {
        var doc = change.doc;
        var rev = change.changes[idx].rev;

        if (doc._deleted) {
            // @todo notify once we can isolate most meaningful deletes
            return;
            //notifyDocumentRemove(doc._id);
        }
        // filters out changes made from LoRa to prevent echo
        else if (doc.$ra) {
            console.log("[broadcast] skip " + doc._id + " received by radio");
            return;
        }
        else if (doc.$ia) {
            console.log("[broadcast] skip " + doc._id + " imported directly");
            return;
        }


        console.log(["======", doc._id, rev, "======"].join(" "));

        // push change over distributed long-range network
        if(!doc.$ra && doc._rev[0] == "1" && doc._rev[1] == "-") {
            // assume document has been created if we're at first revision
            notifyDocumentCreate(doc);
        }
        else if (!doc.$ra) {
            notifyDocumentUpdate(doc);
        }

        console.log(change);
        console.log("\n\n\n");
    }
}



//------------------------------------------------------------------------
/**
* start listening for changes
**/

if (process.env.CLOUD) {
    console.log("[broadcast] skip push since this is in the cloud...");
    return;
}

console.log("[broadcast] about to watch for database changes...");

// give http a head-start to setup...
setTimeout(function() {
    db.changes({
            live: true,
            since: 'now',
            include_docs: true
        })
        .on('active', function() {
            console.log("[broadcast] active change feed");
        })
        .on('paused', function() {
            console.log("[broadcast] paused change feed");
        })
        .on('change', onChange)
        .on('error', function (err) {
            console.log(err);
        });

    console.log("[broadcast] watching changes...");
    setInterval(notifyLanternOnline, ping);
}, 30 * 1000);

