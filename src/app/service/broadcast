#!/usr/bin/env node
var path = require("path");
var fs = require("fs");
var spawn = require('child_process').spawn;
var PouchDB = require("lantern-serve").PouchDB;

var db;
var ping_interval = 15 * 1000; // every 30s+random tell other lanterns we exist
var start_delay = 15 * 1000;

//------------------------------------------------------------------------

/**
* unique device identifier
*/
function getDeviceIdentifier() {
    try {
        var file_path = path.join(__dirname, "..", "node_modules", "lantern-serve", "conf", "lantern.json");
        var obj = JSON.parse(fs.readFileSync(file_path, 'utf8'));
        return obj.id;
    }
    catch(e) {
        console.log(e);
        return "---";
    }
}

/**
* push change over distributed long-range network
**/
function addMessageToQueue(msg) {
    if (!msg) return;

    var program = spawn(path.resolve(__dirname + "/../bin/queue-message"), [msg]);

    program.stdout.on('data', function (data) {
        console.log("[broadcast] " + data.toString());
    });

    program.stderr.on('data', function (data) {
      console.log('[broadcast] q err: ' + data.toString());
    });
}

/**
* let other lanterns know about a key/value change
**/
function notifyDocumentUpdate(doc) {
    var msg = buildParameters(doc);
    if (msg.length) {
        addMessageToQueue(doc._id + "?" + msg);
    }
}


/**
* let other lanterns know about a new document
**/
function notifyDocumentCreate(doc) {
    var msg = buildParameters(doc);
    addMessageToQueue(doc._id + "?" + msg);
}


/**
* let other lanterns know about a removed document
**/
function notifyDocumentRemove(doc_id) {
    addMessageToQueue(doc_id);
}

/**
* let other lanterns know this device is online
**/
function notifyLanternOnline() {
    setTimeout(function() {
        var id = getDeviceIdentifier();
        db.get("d:"+id).then(function(doc) {
            addMessageToQueue(doc._id + "?st=" + doc.st + "&tt=" + doc.tt);
        })
        .catch(function(err) {
            console.log(err);
            console.log("[broadcast] missing lantern id");
        });

    }, 15000*Math.random());
}

/**
* construct a query-string style list of key/value pairs
*/
function buildParameters(doc) {
    var params = [];
    for (var k in doc) {
        // ignore private keys and reserved _ namespace items when sending
        if (k[0] != "_" && k[0] != "$") {
            var val = doc[k];
            if (val instanceof Array) {
                val = val.join(",");
            }
            else if (typeof(val) == "object") {
                val = JSON.stringify(val);
            }
            params.push(k+"="+val);
        }
    }
    return params.join("&");
}


/**
* handler to process any document change in local lantern database
**/
function onChange(change) {
    var msg = "";
    for (var idx in change.changes) {
        var doc = change.doc;
        var rev = change.changes[idx].rev;

        if (doc._deleted) {
            // @todo notify once we can isolate most meaningful deletes
            return;
            //notifyDocumentRemove(doc._id);
        }
        // filters out changes made from LoRa to prevent echo
        else if (doc.$ra) {
            console.log("[broadcast] skip " + doc._id + " received by radio");
            return;
        }
        else if (doc.$ia) {
            console.log("[broadcast] skip " + doc._id + " imported directly");
            return;
        }


        console.log(["======", doc._id, rev, "======"].join(" "));

        // push change over distributed long-range network
        if(!doc.$ra && doc._rev[0] == "1" && doc._rev[1] == "-") {
            // assume document has been created if we're at first revision
            notifyDocumentCreate(doc);
        }
        else if (!doc.$ra) {
            notifyDocumentUpdate(doc);
        }

        console.log(change);
        console.log("\n\n\n");
    }
}



//------------------------------------------------------------------------
/**
* start listening for changes
**/

setTimeout(function() {

    console.log("##############################################");
    console.log(" Lantern Broadcast Service (" + getDeviceIdentifier() + ")");
    console.log("##############################################");


    db = new PouchDB("http://localhost/db/lnt/");

    db.changes({
            live: true,
            since: 'now',
            retry: true,
            include_docs: true
        })
        .on('active', function() {
            console.log("[broadcast] active change feed");
        })
        .on('paused', function() {
            console.log("[broadcast] paused change feed");
        })
        .on('change', onChange)
        .on('error', function (err) {
            console.log(err);
        });

    console.log("[broadcast] watching changes...");
    setInterval(notifyLanternOnline, ping_interval);

}, start_delay);

