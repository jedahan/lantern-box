#!/usr/bin/env node

if (process.argv.length != 3) {
    console.log("This program requires one and only one argument to run");
    process.exit();
}


var done = (function wait() { 
    if (!done) {
        setTimeout(wait, 1000)
    }
    else {
        log.info("ending message processing...\n");
        log.info("##############################################\n");
        setTimeout(process.exit, 100);
    }
})();


var logger_opts = {
    logDirectory:'/opt/lantern/logs/',
    fileNamePattern:'inbox-message-<DATE>.log',
    dateFormat:'YYYY.MM.DD'
};

var log = require('simple-node-logger').createRollingFileLogger( logger_opts );

log.info("##############################################\n");

//----------------------------------------------------------------------------

var db;
var input_str = process.argv[2];


function processCreate(doc) {
    log.info("CREATE DOC ", doc);
    
    // convert timestamp to updated_at field
    if (doc.hasOwnProperty("ts")) {
        doc.$ua = new Date(doc.ts);
        delete doc.ts;
    }

    return db.post(doc).then(function(results) {
        log.info(results);
        done = true;
    })
    .catch(function(err) {
        log.info(err);
        done = true;
    });
}

function processUpdate(changes) {

    return db.get(changes._id).then(function(doc) {

        log.info("found document " + doc._id + " merging...");
        
        // make sure new document has different significant values
        var did_change = false;
        for (var idx in changes) {
            if (idx[0] != "$" && idx != "ts") {
                if (!doc.hasOwnProperty(idx) || JSON.stringify(doc[idx]) != JSON.stringify(changes[idx])) {
                    doc[idx] = changes[idx];
                    did_change = true;
                    log.info("changed: ", idx, changes[idx]);
                }   
            }
        }

        if (!did_change) {
            log.info("skipping unchanged document " + doc._id);
            return;
        }

        // check version numbers where available for updates
        if (changes.hasOwnProperty("ts") && doc.hasOwnProperty("$ua")) {            
            var ts_a = changes.ts;
            var ts_b = new Date(doc.$ua).getTime();
            if (ts_a <= ts_b) {
                log.info("skipping older document " + doc._id, ts_a, ts_b);
                return;
            }
        }

        log.info("UPDATE TO DOC", doc);

        return db.post(doc)
            .then(function(results) {
                log.info(results);
            });
    })
    .then(function() {
        done = true;
    })
    .catch(function(err) {
        if (err.status == 404) {
            processCreate(changes);
        }
        else {
            log.info(err);
            done = true;
        }
    });
}

function processDelete(doc) {
    log.info("DELETE DOC ", doc);

    db.get(doc._id).then(function(old_doc) {
        log.info("found document. removing...");
        doc._rev = old_doc._rev;
        return db.remove(doc).then(function(results) {
            log.info(results);
            done = true;
        });
    })
    .catch(function(err) {
        if (err.status == 404) {
            log.info("can't update non-existing document");
            done = true;
        }
        else {
            log.info(err);
            done = true;
        }
    });
}



//----------------------------------------------------------------------------

var input = input_str.replace(/\^+/, '\x01').split('\x01');
if (input.length == 2) {
    // update
    var PouchDB = require("lantern-serve").PouchDB;
    db = new PouchDB("http://localhost/db/lnt/");
    
    var id = input[0];
    var msg = input[1];

    if (msg.indexOf("?") == -1) {
        log.info("ignoring message without query string", msg);
        done = true;
        return;
    }

    var parts = msg.split("?");

    log.info("message id = " + id);

    // begin constructing doc based on message
    var doc = {
        _id: parts[0],
        $rx: true // document received by long-range radio, don't push back out
    };

    var keys = parts[1];
    log.info(keys);
    var key_parts = keys.split("&");
    log.info(key_parts);

    key_parts.forEach(function(part) {

        var item = part.split("=");
        var k = item[0];
        var v = item[1];

        // double-check to make sure we don't process $key or _key
        if (k[0] == "$" || k[0] == "_") {
            return;
        }

        v = decodeURIComponent(v);

        // is this a comma-separated list? if so, assume array
        if (v[0] == ",") {
            doc[k] = new Array();
            v.split(",").forEach(function(val) {
                if (val) doc[k].push(val);
            });
        }
        // is this a number?
        else if (v[0] == "#") {
            doc[k] = Number(v.substr(1, v.length-1));
        }
        else {
            doc[k] = v;                
        }
    });
    
    processUpdate(doc);
    
}
else {
    log.info("ignoring message: " + input);
    done = true;
}