#!/usr/bin/env python2
from __future__ import print_function
import sys
import string
import time
import rf95
from threading import Timer
from persistqueue import FIFOSQLiteQueue

send_freq_secs = 15 # how many seconds should we wait between messages
lora = rf95.RF95(0, 25, None, 13)
freq = 915.00
did_init = False
q = FIFOSQLiteQueue(path="/tmp/messages-sqlite")

#------------------------------------------------------------------

class RepeatedTimer(object):
    def __init__(self, interval, function, *args, **kwargs):
        self._timer     = None
        self.interval   = interval
        self.function   = function
        self.args       = args
        self.kwargs     = kwargs
        self.is_running = False
        self.start()

    def _run(self):
        self.is_running = False
        self.start()
        self.function(*self.args, **self.kwargs)

    def start(self):
        if not self.is_running:
            self._timer = Timer(self.interval, self._run)
            self._timer.start()
            self.is_running = True

    def stop(self):
        self._timer.cancel()
        self.is_running = False
        


def isLoRaBusy():
    lora.spi.open(0,lora.cs)
    current_mode = lora.spi_read(rf95.REG_01_OP_MODE)
    if (current_mode == 128 or current_mode == 129):
        return True

def subscribeAll():
    # only receive data if we are not trying to send...
    while len(q) == 0:
        print("waiting for lora messages...")
        # Wait until data is available 
        while not lora.available():
            pass
        # Receive
        data = lora.recv()
        print("-----------------")
        print("receiving:")
        for i in data:
            print(chr(i), end="")
        print("bytes received: " + str(lora.buflen))
        print("-----------------")

def publishAll():
    q = FIFOSQLiteQueue(path="/tmp/messages-sqlite")
    print("publishing " + str(len(q)) + " messages from queue...")
    while len(q) > 0:
        item = q.get()
        print("-----------------")
        print("sending: "   + item)
        lora.send(lora.str_to_data(item))
        lora.wait_packet_sent()
        transmit_len = len(item.encode("utf8"))
        print("bytes sent: " + str(transmit_len))
        print("-----------------")
        time.sleep(2)
        q.task_done()

#------------------------------------------------------------------

if __name__ == '__main__':
    try:
        if ( isLoRaBusy() ):
            print("radio in use elsewhere...")
            quit(1)
        elif not lora.init(): # returns True if found
            print("radio not found or not ready")
            lora.cleanup()
            quit(1)
        else:
            print("radio ready @ " + str(freq) + "mhz")
            did_init = True

        lora.set_frequency(freq)
        lora.set_tx_power(15)

        rt = RepeatedTimer(send_freq_secs, publishAll)
        subscribeAll()


    finally:
        # clean up
        if did_init:
            rt.stop()
            lora.set_mode_idle()
            lora.cleanup()